global:
  cloudProvider: {}
  tracing: {}
  metrics: {}
  environment: ''
  serviceUrls:
    jobManager: ""
    heartbeatManager: ""
  ca:    
    secretName: ''
    path: '/usr/local/share/ca-certificates'
    key: 'ca.crt'
  gracefulReloadMaxSeconds: 300    

enabled: true
environment: development
replicaCount: 1
revisionHistoryLimit: 5 # Amount of revisions we keep
nodePort: 30030 #for minikube deployment only
resetOnConfigChange: false

nameOverride: ""
fullnameOverride: ""

livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  path: /liveness

readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  path: /liveness

podAnnotations: {}

extraVolumes: []

extraVolumeMounts: []

extraEnvVars: []

command: []
args: []
# command: [ "/bin/sh", "-c", "--" ]
# args: [ "while true; do sleep infinity; done;" ]

sidecars: []

cloudProvider:
  dockerRegistryUrl: 'my-registry-url.io'
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

image:
  repository: overseer
  tag: 'latest'
  pullPolicy: Always

serviceUrls:
  jobManager: "http://localhost:8081"
  heartbeatManager: "http://localhost:8082"

tracing:
  enabled: false
  url: http://localhost:55681/v1/trace
metrics:
  enabled: false
  url: http://localhost:55681/v1/metrics
  buckets:
  - 0.005
  - 0.01
  - 0.025
  - 0.05
  - 0.1
  - 0.25
  - 0.5
  - 1
  - 2.5
  - 5
  - 10
  - 15
  - 50
  - 250
  - 500

env:
  port: 8080
  targetPort: 8080
  protocol: TCP
  logLevel: info
  logPrettyPrintEnabled: false
  responseCompressionEnabled: true
  requestPayloadLimit: 1mb

  httpRetry:
    attempts: 5
    delay: exponential
    resetTimeout: 30000
  disableHttpClientLogs: true     

  mapServerCacheType: "FS"
  jobManagement:
    config:
      dequeueIntervalMs: 3000
      heartBeat:
        intervalMs: 3000
    ingestion:
      pollingTasks:
        init: init
        finalize: finalize
      jobs:
        new:
          type: 'Ingestion_New'
        update:
          type: 'Ingestion_Update'
        swapUpdate:
          type: 'Ingestion_Swap_Update'
      tasks:
        tilesMerging:
          type: 'Tiles_Merging'
          tileBatchSize: 10000
          taskBatchSize: 5
          useNewTargetFlagInUpdate: true


resources:
  enabled: true
  value:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
